class node:
    count = 0
    num = 0

class heap:
    array = []

    def insert(self,node): #node with count 3 and num = 1 
        self.array.append(node)
        childindex = len(self.array)-1
        parentindex = (childindex - 1)//2

        while(parentindex>=0 and self.array[childindex].count > self.array[parentindex].count ):
            temp = self.array[parentindex]
            self.array[parentindex] = self.array[childindex]
            self.array[childindex] = temp
            childindex = parentindex
            parentindex = (childindex - 1)//2
    
    def takeone(self):
        returning_num = self.array[0].num
        self.array[0] = self.array[len(self.array)-1]
        del self.array[len(self.array)-1]
        parentindex = 0
        childindex = (parentindex *2)+1
        while(childindex < len(self.array) and self.array[childindex].count > self.array[parentindex].count):
            temp = self.array[parentindex]
            self.array[parentindex] = self.array[childindex]
            self.array[childindex] = temp
            parentindex = childindex
            childindex = (parentindex *2)+1
        return returning_num

class Solution:

    def topKFrequent(self, nums, k):
        HEAP = heap()
        dictt = {}
        for i in nums:
            if i not in dictt:
                dictt[i] = 0
            else:
                dictt[i] += 1

        for each in dictt:
            n = node()
            n.num = each
            n.count = dictt[each]
            HEAP.insert(n)
        
        a = []
        for i in range(k):
            a.append(HEAP.takeone())
        return a

a = Solution()
ans = a.topKFrequent([1,2],2)
print(ans)
